// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String               @id @default(uuid())
  name               String
  email              String               @unique
  password           String
  address            String?
  phone              String?
  admin              Boolean              @default(false)
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  deletedAt          DateTime?
  restaurant         Restaurant?
  Order              Order[]
  RestaurantReview   RestaurantReview[]
  DishReview         DishReview[]
  FavoriteRestaurant FavoriteRestaurant[]
  FavoriteDish       FavoriteDish[]
}

model Restaurant {
  id                 String               @id @default(uuid())
  name               String
  description        String
  slug               String               @unique
  address            String
  phone              String
  image              String
  isOnOffer          Boolean              @default(false)
  admin              Account              @relation(fields: [adminId], references: [id])
  adminId            String               @unique
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  deletedAt          DateTime?
  Dish               Dish[]
  Order              Order[]
  RestaurantReview   RestaurantReview[]
  rating             Float                @default(0)
  FavoriteRestaurant FavoriteRestaurant[]
}

model Dish {
  id                 String               @id @default(uuid())
  name               String
  description        String
  price              Float?
  new_price          Float
  image              String
  restaurant         Restaurant           @relation(fields: [restaurantId], references: [id])
  restaurantId       String
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  deletedAt          DateTime?
  DishesInOrder      DishesInOrder[]
  CategoriesInDishes CategoriesInDishes[]
  DishReview         DishReview[]
  rating             Float                @default(0)
  FavoriteDish       FavoriteDish[]
}

model Order {
  id            String          @id @default(uuid())
  name          String
  address       String
  phone         String
  status        String          @default("pending")
  account       Account         @relation(fields: [accountId], references: [id])
  accountId     String
  restaurant    Restaurant      @relation(fields: [restaurantId], references: [id])
  restaurantId  String
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  deletedAt     DateTime?
  DishesInOrder DishesInOrder[]
}

model DishesInOrder {
  id        String    @id @default(uuid())
  quantity  Int
  dish      Dish      @relation(fields: [dishId], references: [id])
  dishId    String
  order     Order     @relation(fields: [orderId], references: [id])
  orderId   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@unique([dishId, orderId])
}

model Category {
  id                 String               @id @default(uuid())
  name               String               @unique
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  deletedAt          DateTime?
  CategoriesInDishes CategoriesInDishes[]
}

model CategoriesInDishes {
  id         String    @id @default(uuid())
  category   Category  @relation(fields: [categoryId], references: [id])
  categoryId String
  dish       Dish      @relation(fields: [dishId], references: [id])
  dishId     String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  deletedAt  DateTime?

  @@unique([categoryId, dishId])
}

model RestaurantReview {
  id           String     @id @default(uuid())
  comment      String
  rating       Int
  accountId    String
  account      Account    @relation(fields: [accountId], references: [id])
  restaurantId String
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  deletedAt    DateTime?

  @@unique([accountId, restaurantId])
}

model DishReview {
  id        String    @id @default(uuid())
  comment   String
  rating    Int
  accountId String
  account   Account   @relation(fields: [accountId], references: [id])
  dishId    String
  dish      Dish      @relation(fields: [dishId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@unique([accountId, dishId])
}

model FavoriteRestaurant {
  id           String     @id @default(uuid())
  accountId    String
  account      Account    @relation(fields: [accountId], references: [id])
  restaurantId String
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  deletedAt    DateTime?

  @@unique([accountId, restaurantId])
}

model FavoriteDish {
  id        String    @id @default(uuid())
  accountId String
  account   Account   @relation(fields: [accountId], references: [id])
  dishId    String
  dish      Dish      @relation(fields: [dishId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@unique([accountId, dishId])
}
